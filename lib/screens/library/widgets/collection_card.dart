import 'package:flutter/material.dart';
import 'package:plant_collector/models/app_data.dart';
import 'package:plant_collector/formats/text.dart';
import 'package:plant_collector/models/builders_general.dart';
import 'package:plant_collector/models/data_types/collection_data.dart';
import 'package:plant_collector/models/data_storage/firebase_folders.dart';
import 'package:plant_collector/models/data_types/plant/plant_data.dart';
import 'package:plant_collector/models/data_types/user_data.dart';
import 'package:plant_collector/models/global.dart';
import 'package:plant_collector/screens/dialog/dialog_screen_input.dart';
import 'package:plant_collector/screens/library/widgets/add_plant.dart';
import 'package:plant_collector/widgets/dialogs/color_picker/dialog_picker.dart';
import 'package:plant_collector/widgets/dialogs/dialog_confirm.dart';
import 'package:plant_collector/screens/library/widgets/plant_tile.dart';
import 'package:plant_collector/widgets/info_tip.dart';
import 'package:provider/provider.dart';
import 'package:plant_collector/models/cloud_db.dart';
import 'package:expandable/expandable.dart';
import 'package:plant_collector/widgets/tile_white.dart';
import 'package:plant_collector/formats/colors.dart';

class CollectionCard extends StatelessWidget {
  final bool connectionLibrary;
  final CollectionData collection;
  final String groupID;
  final Color colorTheme;
  final bool defaultView;
  final bool showWishList;
  final bool showSellList;

  CollectionCard({
    @required this.connectionLibrary,
    @required this.collection,
    @required this.groupID,
    @required this.colorTheme,
    @required this.defaultView,
    this.showWishList = false,
    this.showSellList = false,
  });

  @override
  Widget build(BuildContext context) {
    //use the appropriate plant source
    List<PlantData> fullList = (connectionLibrary == false)
        ? Provider.of<AppData>(context).currentUserPlants
        : Provider.of<AppData>(context).connectionPlants;

    //get plants for the collection from the full list
    List<PlantData> collectionPlants = AppData.getPlantsFromList(
        collectionPlantIDs: collection.plants, plants: fullList);

    //note collection plant total is calculated from this list instead of collection.plants
    //to prevent range errors if an entry is in collection.plants but the plant is deleted
    int collectionPlantTotal = collectionPlants.length;

    //item count for gridview
    int itemCountGridView;
    int itemCountIndexSwap;
    if (connectionLibrary == true) {
      print('Connection Libray');
      //never show the add button in connection view
      itemCountGridView = collectionPlantTotal;
      itemCountIndexSwap = itemCountGridView - 1;
    } else if (DBDefaultDocument.collectionPreventMoveInto
        .contains(collection.id)) {
      //my library don't show add button for certain shelves
      itemCountGridView = collectionPlantTotal;
      itemCountIndexSwap = itemCountGridView - 1;
    } else {
      //otherwise show the add button
      itemCountGridView = collectionPlantTotal + 1;
      itemCountIndexSwap = collectionPlantTotal - 1;
    }

    //convert card color
    Color colorTheme = convertColor(storedColor: collection.color);

    //plant tile possible parents
    List<CollectionData> plantTilePossibleParents = (connectionLibrary == false)
        ? Provider.of<AppData>(context).currentUserCollections
        : Provider.of<AppData>(context).connectionCollections;
    //remove the auto generated import collections and hidden
    List<CollectionData> reducedParents = [];
    for (CollectionData collection in plantTilePossibleParents) {
      if (collection.id == DBDefaultDocument.wishList) {
        if (showWishList == true) reducedParents.add(collection);
      } else if (collection.id == DBDefaultDocument.sellList) {
        if (showSellList == true) reducedParents.add(collection);
      } else if (!DBDefaultDocument.collectionPreventMoveInto
          .contains(collection.id)) {
        reducedParents.add(collection);
      }
    }

    //*****SET WIDGET VISIBILITY START*****//

    //enable dialogs only if library belongs to the current user
    //don't show for autogenerated cards
    bool showDeleteButton = (collectionPlantTotal == 0 &&
        connectionLibrary == false &&
        !DBDefaultDocument.collectionAutoGen.contains(collection.id));

    //prevent empty gridview build
    bool hideGridView =
        ((connectionLibrary == true && itemCountGridView == 0) ||
            (connectionLibrary == false &&
                defaultView == true &&
                itemCountGridView == 0));

    //*****SET WIDGET VISIBILITY END*****//

    return TileWhite(
      child: Consumer<UserData>(builder: (context, user, _) {
        if (user == null) {
          return SizedBox();
        } else {
          return ExpandableNotifier(
            //user settings to determine if collection is collapsed by default
            initialExpanded: user.expandCollection,
            child: Expandable(
              expanded: Column(
                children: <Widget>[
                  CollectionHeader(
                    defaultView: defaultView,
                    connectionLibrary: connectionLibrary,
                    collection: collection,
                    colorTheme: colorTheme,
                    expandedIcon: Icons.keyboard_arrow_up,
                  ),
                  //provide a delete button if the collection is empty
                  (showDeleteButton == true)
                      ? Column(
                          children: <Widget>[
                            Provider.of<AppData>(context).showTips == true
                                ? InfoTip(
                                    onPress: () {},
                                    text:
                                        '${GlobalStrings.collections} hold your ${GlobalStrings.plants}.  '
                                        'They can only be deleted when empty, via the trash button below.  \n\n'
                                        'Hold down on the ${GlobalStrings.collection} name to rename it.  \n\n'
                                        'Tap the arrow button to the right of the name to collapse or expand.  \n\n'
                                        'Hold down on the arrow button to set the colour.  \n\n'
                                        'You can add a ${GlobalStrings.plant} with the green "+" button below.  '
                                        'Then tap the ${GlobalStrings.plant} to visit it\'s profile.  \n\n'
                                        'Hold down on a ${GlobalStrings.plant} to move it to another location.')
                                : SizedBox(),
                            Container(
                              decoration: kButtonBoxDecoration,
                              width: double.infinity,
                              child: FlatButton(
                                padding: EdgeInsets.all(10.0),
                                child: CircleAvatar(
                                  foregroundColor: kGreenDark,
                                  backgroundColor: Colors.white,
                                  radius: AppTextSize.medium *
                                      MediaQuery.of(context).size.width,
                                  child: Icon(
                                    Icons.delete_forever,
                                    size: AppTextSize.huge *
                                        MediaQuery.of(context).size.width,
                                  ),
                                ),
                                onPressed: () {
                                  showDialog(
                                    context: context,
                                    builder: (BuildContext context) {
                                      return DialogConfirm(
                                        title:
                                            'Remove ${GlobalStrings.collection}',
                                        text:
                                            'Are you sure you want to delete this ${GlobalStrings.collection}?',
                                        buttonText: 'Remove',
                                        onPressed: () {
                                          //delete the collection
                                          CloudDB.deleteDocumentL2(
                                              collectionL1: DBFolder.users,
                                              documentL1:
                                                  Provider.of<AppData>(context)
                                                      .currentUserInfo
                                                      .id,
                                              collectionL2:
                                                  DBFolder.collections,
                                              documentL2: collection.id);
                                          //pop context
                                          Navigator.pop(context);
                                        },
                                      );
                                    },
                                  );
                                },
                              ),
                            ),
                          ],
                        )
                      : const SizedBox(),
                  Builder(
                    builder: (context) {
                      //if friend library with no plants, this prevents empty white space
                      if (hideGridView == true) {
                        return SizedBox();
                      } else {
                        return GridView.builder(
                          shrinkWrap: true,
                          //allows scrolling
                          primary: false,
                          padding: EdgeInsets.only(bottom: 10.0),
                          scrollDirection: Axis.vertical,
                          //add additional button only for collection owner
                          //no add button for auto generated
                          itemCount: itemCountGridView,
                          gridDelegate:
                              SliverGridDelegateWithFixedCrossAxisCount(
                                  crossAxisCount: 3),
                          itemBuilder: (BuildContext context, int index) {
                            Widget tile;
                            //build a tile for each plant in the list, beginning index 0
                            if (index <= itemCountIndexSwap) {
                              tile = Padding(
                                padding: EdgeInsets.all(1.0 *
                                    MediaQuery.of(context).size.width *
                                    kScaleFactor),
                                child: PlantTile(
                                  connectionLibrary: connectionLibrary,
                                  possibleParents: reducedParents,
                                  plant: collectionPlants[index],
                                  collectionID: collection.id,
                                  communityView: false,
                                ),
                              );
                              //for the last item put an add button
                            } else {
                              tile = Padding(
                                padding: EdgeInsets.all(1.0 *
                                    MediaQuery.of(context).size.width *
                                    kScaleFactor),
                                child: AddPlant(collectionID: collection.id),
                              );
                            }
                            return tile;
                          },
                        );
                      }
                    },
                  ),
                  SizedBox(height: 10.0),
                ],
              ),
              collapsed: CollectionHeader(
                  defaultView: defaultView,
                  connectionLibrary: connectionLibrary,
                  collection: collection,
                  colorTheme: colorTheme,
                  expandedIcon: Icons.keyboard_arrow_down),
            ),
          );
        }
      }),
    );
  }
}

class CollectionHeader extends StatelessWidget {
  final bool defaultView;
  final bool connectionLibrary;
  final CollectionData collection;
  final Color colorTheme;
  final IconData expandedIcon;

  CollectionHeader(
      {@required this.defaultView,
      @required this.connectionLibrary,
      @required this.collection,
      @required this.colorTheme,
      @required this.expandedIcon});

  @override
  Widget build(BuildContext context) {
    //set plant number
    String collectionPlantTotal = collection.plants.length.toString();

    //*****SET WIDGET VISIBILITY START*****//

    //enable dialogs only for current user on their main Library page
    bool enableDialogs = (connectionLibrary == false && defaultView == false);

    //only allow current user to change color on their library
    //exclude autogenerated
    bool allowColorChange = (connectionLibrary == false &&
        !DBDefaultDocument.collectionAutoGen.contains(collection.id));

    //show automatic generated image
    bool autoGen =
        (DBDefaultDocument.collectionAutoGen.contains(collection.id));

    //*****SET WIDGET VISIBILITY END*****//

    return Padding(
      padding: EdgeInsets.only(
        bottom: 14.0,
      ),
      child: Column(
        children: <Widget>[
          Padding(
            padding: EdgeInsets.only(
              left: 10.0,
              top: 14.0,
              right: 10.0,
              bottom: 6.0,
            ),
            child: GestureDetector(
              onLongPress: () {
                //remove functionality for friend collection or auto generated
                if (enableDialogs == true && autoGen == false)
                  showDialog(
                      context: context,
                      builder: (context) {
                        return DialogScreenInput(
                            title: 'Rename ${GlobalStrings.collection}',
                            acceptText: 'Update',
                            acceptOnPress: () {
                              //create data pair map
                              Map data = AppData.updatePairFull(
                                  key: CollectionKeys.name,
                                  value: Provider.of<AppData>(context)
                                      .newDataInput);
                              //upload update to db
                              Provider.of<CloudDB>(context)
                                  .updateDocumentInCollection(
                                      data: data,
                                      collection: DBFolder.collections,
                                      documentName: collection.id);
                              //pop context
                              Navigator.pop(context);
                            },
                            onChange: (input) {
                              Provider.of<AppData>(context).newDataInput =
                                  input;
                            },
                            cancelText: 'Cancel',
                            hintText: collection.name);
                      });
              },
              child: Row(
                mainAxisSize: MainAxisSize.max,
                mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                crossAxisAlignment: CrossAxisAlignment.start,
                children: <Widget>[
                  SizedBox(
                    width: 30.0,
                    child: (autoGen == false)
                        ? SizedBox()
                        : Center(
                            child: Icon(
                              Icons.star,
                              size: AppTextSize.large *
                                  MediaQuery.of(context).size.width,
                              color: kGreenDark,
                            ),
                          ),
                  ),
                  Expanded(
                    child: Container(
                      width: MediaQuery.of(context).size.width * 0.7,
                      child: Text(
                        collection.name.toUpperCase(),
                        overflow: TextOverflow.fade,
                        textAlign: TextAlign.center,
                        style: TextStyle(
                          fontSize: AppTextSize.large *
                              MediaQuery.of(context).size.width,
                          fontWeight: AppTextWeight.medium,
                        ),
                      ),
                    ),
                  ),
                  GestureDetector(
                    //ALLOW A WAY TO SET COLOR
                    onLongPress: () {
                      if (allowColorChange == true)
                        showDialog(
                          context: context,
                          builder: (BuildContext context) {
                            return DialogPicker(
                              title: 'Pick a Colour',
                              widgets: UIBuilders.colorButtonsList(
                                  colors: kGroupColors,
                                  onPress: () {
                                    Navigator.pop(context);
                                  },
                                  collectionID: collection.id),
                            );
                          },
                        );
                    },
                    child: ExpandableButton(
                      child: CircleAvatar(
                        radius: 16.0 *
                            MediaQuery.of(context).size.width *
                            kScaleFactor,
                        backgroundColor: colorTheme,
                        child: Icon(
                          expandedIcon,
                          size: 30.0 *
                              MediaQuery.of(context).size.width *
                              kScaleFactor,
                          color: AppTextColor.white,
                        ),
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ),
          Container(
            height: 2.0,
            width: MediaQuery.of(context).size.width * 0.65,
            color: colorTheme,
          ),
          SizedBox(height: 5.0),
          Text(
            collectionPlantTotal == '1'
                ? '$collectionPlantTotal ${GlobalStrings.plant} on ${GlobalStrings.collection}'
                : '$collectionPlantTotal ${GlobalStrings.plants} on ${GlobalStrings.collection}',
            style: TextStyle(
                color: AppTextColor.light,
                fontSize:
                    AppTextSize.small * MediaQuery.of(context).size.width),
          ),
        ],
      ),
    );
  }
}
